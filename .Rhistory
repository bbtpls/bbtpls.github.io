print "testing"
print ("testing")
library(readr)
gapminder <- read_csv("Downloads/gapminder.csv")
View(gapminder)
View(gapminder)
str(gapminder)
head(gapminder)
tail(gapminder)
summary(a$lifeExp)
summary(lifeExp)
summary(df$lifeExp)
print(max(gapminder_2007df[gapminder_2007df$continent == "Asia",]$lifeExp))
print(max(gapminder_2007df[gapminderdf$continent == "Asia",]$lifeExp))
print(max(gapminder_2007df[gapminder$continent == "Asia",]$lifeExp))
lifeExp <- data.frame(gapminder(lifeExp))
lifeExp <- data.frame(cbind(lifeExp))
gapminder_Oceania <- gapminder[gapminder$continent == "Oceania"]
gapminder_Oceania <- gapminder[gapminder$continent == Oceania]
gapminder_Oceania <- gapminder[gapminder$continent == "Oceania"]
rlang::last_error()
rlang::last_trace()
gapminder_2007df <- gapminder[gapminder$year == 2007,]
View(gapminder_2007df)
print(gapminder_2007df[gapminder_2007df$continent == "Asia",])
print(gapminder_2007df[gapminder_2007df$continent == "Asia",]$lifeExp)
print(mean(gapminder_2007df[gapminder_2007df$continent == "Asia",]$lifeExp))
gapminder_1997df <- gapminder_df[gapminder_df$year == 1997,]
gapminder_df <- read.csv(choose.files())
gapminder_df <- read.csv(files.choose())
gapminder_1997df <- gapminder[gapminder$year == 1997,]
cor.test(gapminder_1997df$lifeExp, gapminder_1997df$gdpPercap)
View(gapminder_1997df)
cor.test(gapminder_1997df$pop, gapminder_1997df$gdpPercap)
gapminder_1982df <- gapminder_df[gapminder_df$year == 1982,]
mean(gapminder_1982df$lifeExp)
gapminder_1982df <- gapminder[gapminder$year == 1982,]
mean(gapminder_1982df$lifeExp)
t.test(gapminder_1982df[gapminder_1982df$continent == "Africa",]$lifeExp, mu = 61.5332, alternative = "less")
t.test(gapminder_1982df[gapminder_1982df$continent == "Africa",]$lifeExp, gapminder_1982df[gapminder_1982df$continent == "Asia",]$lifeExp)
gapminder_2007df <- gapminder[gapminder$year == 2007,]
t.test(gapminder_1982df[gapminder_1982df$continent == "Africa",]$lifeExp,
gapminder_2007df[gapminder_2007df$continent == "Africa",]$lifeExp, paired = TRUE,
alternative = "less")
#chi-square is when both are ??, t-test is when it's numerical
library(MASS)
head(survey)
surv_tbl <- table(survey$Exer, survey$Smoke)
chisq.test(surv_tbl)
glimpse(spyt)
install.packages(c("devtools"))
devtools::install_github("ldurazo/kaggler")
library(readr)
library(kaggler)
kgl_auth(creds_file = 'kaggle.json')
install.packages(c("devtools"))
glimpse(spyt)
print(spyt)
read_csv("./data/Spotify_Youtube.csv")
library(tidyverse)
library(shiny)
library(shinydashboard)
library(shinyjs)
#my data
install.packages(c("devtools"))
devtools::install_github("ldurazo/kaggler")
library(readr)
library(kaggler)
kgl_auth(creds_file = 'kaggle.json')
response <- kgl_datasets_download_all(owner_dataset = "salvatorerastelli/spotify-and-youtube")
install.packages(c("devtools"))
download.file(response[["url"]], "./data/temp.zip", mode="wb")
unzip_result <- unzip("./data/temp.zip", exdir = "./data/", overwrite = TRUE)
spyt <- read_csv("./data/Spotify_Youtube.csv")
#cleaning the relevant data
glimpse(spyt)
#cleaning the relevant data
spyt %>%
mutate(lg_Title = nchar(Title),
grepl("https://", Description))
#cleaning the relevant data
spyt %>%
mutate(lg_Title = nchar(Title),
tf_Desc = grepl("https://", Description)) %>%
select(lg_Title, tf_Desc)
glimpse(spyt)
#cleaning the relevant data
spyt %>%
mutate(lg_Title = nchar(Title),
tf_Desc = grepl("https://", Description))
glimpse(spyt)
#cleaning the relevant data
spyt_cl <- spyt %>%
mutate(lg_Title = nchar(Title),
tf_Desc = str_count(Description, "https://")) %>%
select(Instrumentalness, Liveness, Valence, Tempo, Duration_ms, Stream, lg_Title, Views, Likes, tf_Desc, Licensed, official_video, Danceability, Energy, Speechiness)
glimpse(spyt_cl)
View(spyt_cl)
#cleaning the relevant data
spyt_cl <- spyt %>%
mutate(lg_Title = nchar(Title),
link_Desc = str_count(Description, "https://"),
tf_licens = as.integer(as.logical(spyt$Licensed)),
tf_offvid = as.integer(as.logical(spyt$official_video))) %>%
select(Instrumentalness, Liveness, Valence, Tempo, Duration_ms, Stream, lg_Title, Views, Likes, link_Desc, tf_licens, tf_offvid, Danceability, Energy, Speechiness)
glimpse(spyt_cl)
#cleaning the relevant data
cl_spyt <- spyt %>%
mutate(lg_Title = nchar(Title),
link_Desc = str_count(Description, "https://"),
tf_licens = as.integer(as.logical(spyt$Licensed)),
tf_offvid = as.integer(as.logical(spyt$official_video))) %>%
select(Instrumentalness, Liveness, Valence, Tempo, Duration_ms, Stream, lg_Title, Views, Likes, link_Desc, tf_licens, tf_offvid, Danceability, Energy, Speechiness)
glimpse(cl_spyt)
ui <- basicPage(
plotOutput("plot1", hover = "plot_hover"),
verbatimTextOutput("info")
)
server <- function(input, output) {
output$plot1 <- renderPlot({
plot(cl_spyt$Stream, cl_spyt$Energy)
})
output$info <- renderText({
paste0("x=", input$plot_hoverk$x, "\ny=", input$plot_hoverk$y)
})
}
shinyApp(ui, server)
ui <- basicPage(
plotOutput("plot1", click = "plot_click"),
verbatimTextOutput("info")
)
server <- function(input, output) {
output$plot1 <- renderPlot({
plot(cl_spyt$Stream, cl_spyt$Energy)
})
output$info <- renderText({
paste0("x=", input$plot_click$x, "\ny=", input$plot_click$y)
})
}
shinyApp(ui, server)
shinyApp(
ui <- basicPage(
plotOutput("plot1", click = "plot_click"),
verbatimTextOutput("info")
),
server <- function(input, output) {
output$plot1 <- renderPlot({
plot(cl_spyt$Stream, cl_spyt$Energy)
})
output$info <- renderText({
paste0("x=", input$plot_click$x, "\ny=", input$plot_click$y)
})
}
)
