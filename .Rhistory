glimpse(palmerpenguins)
library(tidyverse)
library(palmerpenguins)
glimpse(palmerpenguins)
glimpse("palmerpenguins")
glimpse(penguins)
p1 <- ggplot(penguins) +
aes(x = bill_depth_mm, y = bill_length_mm) +
geom_line()
library(tidyverse)
library(plotly)
library(palmerpenguins)
p1 <- ggplot(penguins) +
aes(x = bill_depth_mm, y = bill_length_mm) +
geom_line()
ggplotly(p1)
ggplot(penguins) +
aes(x = bill_depth_mm, y = bill_length_mm) +
geom_line()
p1 <- ggplot(penguins) +
aes(x = bill_depth_mm, y = bill_length_mm) +
geom_line()
ggplotly(p1)
library(tidyverse)
#my data
install.packages(c("devtools"))
devtools::install_github("ldurazo/kaggler")library(readr)
library(tidyverse)
#my data
install.packages(c("devtools"))
devtools::install_github("ldurazo/kaggler")
library(readr)
library(kaggler)kgl_auth(creds_file = 'kaggle.json')
library(tidyverse)
#my data
install.packages(c("devtools"))
devtools::install_github("ldurazo/kaggler")
library(readr)
library(kaggler)
kgl_auth(creds_file = 'kaggle.json')
response <- kgl_datasets_download_all(owner_dataset = "salvatorerastelli/spotify-and-youtube")
download.file(response[["url"]], "data/temp.zip", mode="wb")
unzip_result <- unzip("data/temp.zip", exdir = "data/", overwrite = TRUE)
spyt <- read_csv("data/Spotify_Youtube.csv")
library(tidyverse)
#my data
install.packages(c("devtools"))
devtools::install_github("ldurazo/kaggler")
library(readr)
library(kaggler)
kgl_auth(creds_file = 'kaggle.json')
response <- kgl_datasets_download_all(owner_dataset = "salvatorerastelli/spotify-and-youtube")
install.packages(c("devtools"))
download.file(response[["url"]], "./data/temp.zip", mode="wb")
unzip_result <- unzip("./data/temp.zip", exdir = "./data/", overwrite = TRUE)
spyt <- read_csv("./data/Spotify_Youtube.csv")
glimpse(spyt)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(selectInput("var_x", label = h2("select x-axis"),
choices = colnames(spyt)),
selectInput("var_y", label = h2("select y-axis"),
choices = colnames(spyt))),
box(plotOutput("line", height = 250))
)
)
)
ui <- dashboardBody(
fluidRow(
box(selectInput("var_x", label = h2("select x-axis"),
choices = colnames(spyt)),
selectInput("var_y", label = h2("select y-axis"),
choices = colnames(spyt))),
box(plotOutput("line", height = 250))
)
)
library(tidyverse)
library(shiny)
library(shinydashboard)
#my data
install.packages(c("devtools"))
devtools::install_github("ldurazo/kaggler")
library(readr)
library(kaggler)
kgl_auth(creds_file = 'kaggle.json')
response <- kgl_datasets_download_all(owner_dataset = "salvatorerastelli/spotify-and-youtube")
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(selectInput("var_x", label = h2("select x-axis"),
choices = colnames(spyt)),
selectInput("var_y", label = h2("select y-axis"),
choices = colnames(spyt))),
box(plotOutput("line", height = 250))
)
)
)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(selectInput("var_x", label = h2("select x-axis"),
choices = colnames(spyt)),
selectInput("var_y", label = h2("select y-axis"),
choices = colnames(spyt))),
box(plotOutput("line", height = 250))
)
)
)
library(tidyverse)
library(shiny)
library(shinydashboard)
#my data
install.packages(c("devtools"))
devtools::install_github("ldurazo/kaggler")
library(readr)
library(kaggler)
kgl_auth(creds_file = 'kaggle.json')
response <- kgl_datasets_download_all(owner_dataset = "salvatorerastelli/spotify-and-youtube")
library(tidyverse)
library(shiny)
library(shinydashboard)
#my data
install.packages(c("devtools"))
devtools::install_github("ldurazo/kaggler")
library(readr)
library(kaggler)
kgl_auth(creds_file = 'kaggle.json')
response <- kgl_datasets_download_all(owner_dataset = "salvatorerastelli/spotify-and-youtube")
download.file(response[["url"]], "./data/temp.zip", mode="wb")
unzip_result <- unzip("./data/temp.zip", exdir = "./data/", overwrite = TRUE)
spyt <- read_csv("./data/Spotify_Youtube.csv")
glimpse(spyt)
install.packages(c("devtools"))
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(selectInput("var_x", label = h2("select x-axis"),
choices = colnames(spyt)),
selectInput("var_y", label = h2("select y-axis"),
choices = colnames(spyt))),
box(plotOutput("line", height = 250))
)
)
)
library(tidyverse)
library(shiny)
library(shinydashboard)
#my data
install.packages(c("devtools"))
devtools::install_github("ldurazo/kaggler")
library(readr)
library(kaggler)
kgl_auth(creds_file = 'kaggle.json')
response <- kgl_datasets_download_all(owner_dataset = "salvatorerastelli/spotify-and-youtube")
download.file(response[["url"]], "./data/temp.zip", mode="wb")
install.packages(c("devtools"))
unzip_result <- unzip("./data/temp.zip", exdir = "./data/", overwrite = TRUE)
spyt <- read_csv("./data/Spotify_Youtube.csv")
glimpse(spyt)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(selectInput("var_x", label = h2("select x-axis"),
choices = colnames(spyt)),
selectInput("var_y", label = h2("select y-axis"),
choices = colnames(spyt))),
box(plotOutput("line", height = 250))
)
)
)
server <- function(input, output) {
output$line<- renderPlot({
ggplot(mtcars, aes_string(x=input$scat_x, y=input$scat_y)) + geom_point()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(selectInput("var_x", label = h2("select x-axis"),
choices = colnames(spyt)),
selectInput("var_y", label = h2("select y-axis"),
choices = colnames(spyt))),
box(plotOutput("line", height = 250))
)
)
)
server <- function(input, output) {
output$line<- renderPlot({
ggplot(spyt, aes_string(x=input$scat_x, y=input$scat_y)) + geom_line()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(selectInput("var_x", label = h2("select x-axis"),
choices = colnames(spyt)),
selectInput("var_y", label = h2("select y-axis"),
choices = colnames(spyt))),
box(plotOutput("line", height = 250))
)
)
)
library(tidyverse)
library(shiny)
library(shinydashboard)
#my data
install.packages(c("devtools"))
devtools::install_github("ldurazo/kaggler")
library(readr)
library(kaggler)
kgl_auth(creds_file = 'kaggle.json')
response <- kgl_datasets_download_all(owner_dataset = "salvatorerastelli/spotify-and-youtube")
install.packages(c("devtools"))
download.file(response[["url"]], "./data/temp.zip", mode="wb")
unzip_result <- unzip("./data/temp.zip", exdir = "./data/", overwrite = TRUE)
spyt <- read_csv("./data/Spotify_Youtube.csv")
glimpse(spyt)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(selectInput("var_x", label = h2("select x-axis"),
choices = colnames(spyt)),
selectInput("var_y", label = h2("select y-axis"),
choices = colnames(spyt))),
box(plotOutput("line", height = 250))
)
)
)
server <- function(input, output) {
output$line<- renderPlot({
ggplot(spyt, aes(x=input$var_x, y=input$var_y)) + geom_line()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(selectInput("var_x", label = h2("select x-axis"),
choices = colnames(spyt)),
selectInput("var_y", label = h2("select y-axis"),
choices = colnames(spyt))),
box(plotOutput("line", height = 250))
)
)
)
server <- function(input, output) {
output$line<- renderPlot({
ggplot(spyt) + aes(x=input$var_x, y=input$var_y) + geom_line()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(selectInput("var_x", label = h2("select x-axis"),
choices = colnames(spyt)),
selectInput("var_y", label = h2("select y-axis"),
choices = colnames(spyt))),
box(plotOutput("line", height = 250))
)
)
)
server <- function(input, output) {
output$line<- renderPlot({
ggplot(spyt) + aes_string(x=input$var_x, y=input$var_y) + geom_line()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(),
dashboardBody(
fluidRow(
box(selectInput("var_x", label = h2("select x-axis"),
choices = colnames(spyt)),
selectInput("var_y", label = h2("select y-axis"),
choices = colnames(spyt))),
box(plotOutput("line", height = 700, width = 1000))
)
)
)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(selectInput("var_x", label = h2("select x-axis"),
choices = colnames(spyt)),
selectInput("var_y", label = h2("select y-axis"),
choices = colnames(spyt))),
box(plotOutput("line", height = 700, width = 1000))
)
)
)
server <- function(input, output) {
output$line<- renderPlot({
ggplot(spyt) + aes_string(x=input$var_x, y=input$var_y) + geom_line()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(selectInput("var_x", label = h2("select x-axis"),
choices = colnames(spyt)),
selectInput("var_y", label = h2("select y-axis"),
choices = colnames(spyt))),
)
fluidRow(
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(selectInput("var_x", label = h2("select x-axis"),
choices = colnames(spyt)),
selectInput("var_y", label = h2("select y-axis"),
choices = colnames(spyt)))
)
fluidRow(
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(selectInput("var_x", label = h2("select x-axis"),
choices = colnames(spyt)),
selectInput("var_y", label = h2("select y-axis"),
choices = colnames(spyt)))
fluidRow(
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(selectInput("var_x", label = h2("select x-axis"),
choices = colnames(spyt)),
selectInput("var_y", label = h2("select y-axis"),
choices = colnames(spyt)))
),
fluidRow(
box(plotOutput("line", height = 700, width = 1000))
)
)
)
server <- function(input, output) {
output$line<- renderPlot({
ggplot(spyt) + aes_string(x=input$var_x, y=input$var_y) + geom_line()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
fluidRow(
box(selectInput("var_x", label = h2("select x-axis"),
choices = colnames(spyt)),
selectInput("var_y", label = h2("select y-axis"),
choices = colnames(spyt)))
),
fluidRow(
box(plotOutput("line", height = 600, width = 900))
)
)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(selectInput("var_x", label = h2("select x-axis"),
choices = colnames(spyt)),
selectInput("var_y", label = h2("select y-axis"),
choices = colnames(spyt)))
),
fluidRow(
box(plotOutput("line", height = 600, width = 9000))
)
)
)
server <- function(input, output) {
output$line<- renderPlot({
ggplot(spyt) + aes_string(x=input$var_x, y=input$var_y) + geom_line()
})
addClass(selector = "body", class = "sidebar-collapse")
}
shinyApp(ui, server)
library(tidyverse)
library(shiny)
library(shinydashboard)
library(shinyjs)
#my data
install.packages(c("devtools"))
devtools::install_github("ldurazo/kaggler")
library(readr)
library(kaggler)
kgl_auth(creds_file = 'kaggle.json')
response <- kgl_datasets_download_all(owner_dataset = "salvatorerastelli/spotify-and-youtube")
install.packages(c("devtools"))
download.file(response[["url"]], "./data/temp.zip", mode="wb")
unzip_result <- unzip("./data/temp.zip", exdir = "./data/", overwrite = TRUE)
spyt <- read_csv("./data/Spotify_Youtube.csv")
glimpse(spyt)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
useShinyjs(),
fluidRow(
box(selectInput("var_x", label = h2("select x-axis"),
choices = colnames(spyt)),
selectInput("var_y", label = h2("select y-axis"),
choices = colnames(spyt)))
),
fluidRow(
box(plotOutput("line", height = 600, width = 9000))
)
)
)
server <- function(input, output) {
output$line<- renderPlot({
ggplot(spyt) + aes_string(x=input$var_x, y=input$var_y) + geom_line()
})
addClass(selector = "body", class = "sidebar-collapse")
}
shinyApp(ui, server)
shiny::runApp('FinalShiny')
runApp('FinalShiny')
runApp('FinalShiny')
runApp('FinalShiny')
runApp('FinalShiny')
runApp('FinalShiny')
runApp('FinalShiny')
runApp('FinalShiny')
runApp('FinalShiny')
install.packages(c("devtools"))
runApp('FinalShiny')
install.packages(c("devtools"))
runApp('FinalShiny')
install.packages(c("devtools"))
shiny::runApp('FinalShiny2')
runApp('FinalShiny')
install.packages(c("devtools"))
runApp('FinalShiny')
runApp('Final Shiny app.R')
runApp('Final Shiny app.R')
runApp('Final Shiny app.R')
runApp('Final Shiny app.R')
runApp('Final Shiny app.R')
runApp('Final Shiny app.R')
runApp('Final Shiny app.R')
runApp('Final Shiny app.R')
install.packages('rsconnect')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='bbtpls', token='874BC82EB7D1192C31EBC77BE612E6EB', secret='LNErCOBAjMCHF5z/hfnXRlAxt4/a0H6QlyGnvFmr')
runApp('Final Shiny app.R')
runApp('FinalShiny2')
runApp('FinalShiny2')
runApp('Final Shiny app.R')
runApp('Final Shiny app.R')
runApp('Final Shiny app.R')
runApp('Final Shiny app.R')
runApp('Final Shiny app.R')
runApp('Final Shiny app.R')
runApp('Final Shiny app.R')
runApp('Final Shiny app.R')
runApp('Final Shiny app.R')
runApp('Final Shiny app.R')
runApp('Final Shiny app.R')
install.packages(c("devtools"))
runApp('Final Shiny app.R')
library(shiny); runApp('Final Shiny app.R')
